// NK: Doppler-shifted waveform

#ifndef _DOPPLERSHIFTEDWAVEFORM_H
#define _DOPPLERSHIFTEDWAVEFORM_H

#include <math.h>
#include "Globals.h"
#include "CKG.h"
#include "IEKG.h"
#include "NRUtil.h"
#include "GKG.h"
#include "NRLB.h"
#include "SWSH.h"
#include "GKTraj.h"
#include "GKInsp.h"
#include "Cosmology.h"

class DopplerShiftedWaveform {
 public:
  DopplerShiftedWaveform(const Real *intrinsparams, const Real *extrinsparams, double deltat, const int Nfrst, 
					       const int Nlast , const Real tzero, const Real hubb, const Real omM, const Real omL);
  ~DopplerShiftedWaveform();

  const Real *pI,*pE,dt;
  const int Nzero;
  int Nmx;
  const Real t0;
   
  Real norm;
  int length;
  Real *x,*y,*z,*Quad[5];
  Real p_end,e_end,i_end,zmin_end;

  enum { COS_THETA_SKY,  /* Sky position angles, in ecliptic coordinate system */
	 PHI_SKY,
	 COS_THETA_SPIN, /* Angles describing direction of binary spin, in ecliptic coordinate system */
	 PHI_SPIN,
	 ORBIT_PHI0,     /* Initial phase in phi of the orbit. The x-axis is taken to lie in the 
			    plane generated by the spin vector and the line of sight to the source. */
	 SYSTEM_DP,      /* Proper distance to source, in Mpc. This need only be specified if the source 
			    is at zero redshift. Otherwise the waveform code computes the appropriate
			    redshift dependent distance to use. */
	 REDSHIFT,       /* Cosmological redshift of source. This is used to compute the appropriate 
			    distance and reshift the time if necessary. */
	 NUM_EXTRINSIC };

  enum { ORBIT_P,    /* geodesic semilatus rectum / M */
	 LN_ORBIT_ETA,  /* logarithm of reduced mass ratio for nongeodesic orbits */
	 LN_SYSTEM_M,   /* log of central BH mass M (in solar mass units) */
	 ORBIT_E,    /* geodesic eccentricity */
	 ORBIT_PSI0, /* geodesic initial radial cyclic parameter (radians) */
	 ORBIT_I,    /* geodesic inclination */
	 ORBIT_CHI0, /* geodesic initial vertical cyclic parameter (radians) */
	 SYSTEM_A,      /* central BH spin / M */
	 NUM_PARAMS  /* number of search parameters */ };

  int hLISA(int Nmin, int Nmax, Real *hI, Real *hII, Real t0);
  int hpluscross(int Nmin, int Nmax, Real *hp, Real *hx);

 private:
  Real rtthr,sinthsky,csthsky,phik,phis,csthk,sinthk,csinc,cphis,cphik,sphis,sphik;
  Real *xx,*yy,*zz,**Qdmom;
  void ProjectQuadMomTensor(int Nmin, int Nmax, Real **QuadTensor);
  const Real H0, OmegaM, OmegaL;
  Cosmology *LCDM;
};

#endif
